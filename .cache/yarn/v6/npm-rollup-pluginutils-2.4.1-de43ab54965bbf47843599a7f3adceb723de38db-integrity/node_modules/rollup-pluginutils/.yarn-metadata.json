{
  "manifest": {
    "name": "rollup-pluginutils",
    "description": "Functionality commonly needed by Rollup plugins",
    "version": "2.4.1",
    "main": "dist/pluginutils.cjs.js",
    "module": "dist/pluginutils.es.js",
    "jsnext:main": "dist/pluginutils.es.js",
    "typings": "src/index.d.ts",
    "files": [
      "src",
      "dist",
      "README.md"
    ],
    "devDependencies": {
      "@types/estree": "0.0.39",
      "@types/jest": "^24.0.5",
      "@types/micromatch": "^3.1.0",
      "@types/node": "^11.9.4",
      "husky": "^1.3.1",
      "jest": "^24.1.0",
      "lint-staged": "^8.1.4",
      "prettier": "^1.16.4",
      "rollup": "^1.1.2",
      "rollup-plugin-typescript": "^1.0.0",
      "ts-jest": "^23.10.5",
      "tslint": "^5.12.1",
      "typescript": "^3.3.3",
      "typescript-eslint-parser": "^22.0.0"
    },
    "scripts": {
      "test": "jest",
      "build": "rollup -c",
      "lint": "npm run lint:nofix -- --fix",
      "lint:nofix": "tslint --project .",
      "pretest": "npm run build",
      "prepublishOnly": "npm test",
      "prepare": "npm run build"
    },
    "dependencies": {
      "estree-walker": "^0.6.0",
      "micromatch": "^3.1.10"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/rollup/rollup-pluginutils.git"
    },
    "keywords": [
      "rollup",
      "utils"
    ],
    "author": {
      "name": "Rich Harris",
      "email": "richard.a.harris@gmail.com"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/rollup/rollup-pluginutils/issues"
    },
    "homepage": "https://github.com/rollup/rollup-pluginutils#readme",
    "_registry": "npm",
    "_loc": "/home/frappe/.cache/yarn/v6/npm-rollup-pluginutils-2.4.1-de43ab54965bbf47843599a7f3adceb723de38db-integrity/node_modules/rollup-pluginutils/package.json",
    "readmeFilename": "README.md",
    "readme": "# rollup-pluginutils\n\nA set of functions commonly used by Rollup plugins.\n\n\n## Installation\n\n```bash\nnpm install --save rollup-pluginutils\n```\n\n\n## Usage\n\n### addExtension\n\n```js\nimport { addExtension } from 'rollup-pluginutils';\n\nexport default function myPlugin ( options = {} ) {\n  return {\n    resolveId ( code, id ) {\n      // only adds an extension if there isn't one already\n      id = addExtension( id ); // `foo` -> `foo.js`, `foo.js -> foo.js`\n      id = addExtension( id, '.myext' ); // `foo` -> `foo.myext`, `foo.js -> `foo.js`\n    }\n  };\n}\n```\n\n\n### attachScopes\n\nThis function attaches `Scope` objects to the relevant nodes of an AST. Each `Scope` object has a `scope.contains(name)` method that returns `true` if a given name is defined in the current scope or a parent scope.\n\nSee [rollup-plugin-inject](https://github.com/rollup/rollup-plugin-inject) or [rollup-plugin-commonjs](https://github.com/rollup/rollup-plugin-commonjs) for an example of usage.\n\n```js\nimport { attachScopes } from 'rollup-pluginutils';\nimport { parse } from 'acorn';\nimport { walk } from 'estree-walker';\n\nexport default function myPlugin ( options = {} ) {\n  return {\n    transform ( code ) {\n      const ast = parse( code, {\n        ecmaVersion: 6,\n        sourceType: 'module'\n      });\n\n      let scope = attachScopes( ast, 'scope' );\n\n      walk( ast, {\n        enter ( node ) {\n          if ( node.scope ) scope = node.scope;\n\n          if ( !scope.contains( 'foo' ) ) {\n            // `foo` is not defined, so if we encounter it,\n            // we assume it's a global\n          }\n        },\n        leave ( node ) {\n          if ( node.scope ) scope = scope.parent;\n        }\n      });\n    }\n  };\n}\n```\n\n\n### createFilter\n\n```js\nimport { createFilter } from 'rollup-pluginutils';\n\nexport default function myPlugin ( options = {} ) {\n  // `options.include` and `options.exclude` can each be a minimatch\n  // pattern, or an array of minimatch patterns, relative to process.cwd()\n  var filter = createFilter( options.include, options.exclude );\n\n  return {\n    transform ( code, id ) {\n      // if `options.include` is omitted or has zero length, filter\n      // will return `true` by default. Otherwise, an ID must match\n      // one or more of the minimatch patterns, and must not match\n      // any of the `options.exclude` patterns.\n      if ( !filter( id ) ) return;\n\n      // proceed with the transformation...\n    }\n  };\n}\n```\n\n\n### makeLegalIdentifier\n\n```js\nimport { makeLegalIdentifier } from 'rollup-pluginutils';\n\nmakeLegalIdentifier( 'foo-bar' ); // 'foo_bar'\nmakeLegalIdentifier( 'typeof' ); // '_typeof'\n```\n\n### dataToEsm\n\nHelper for treeshakable data imports\n\n```js\nimport { dataToEsm } from 'rollup-pluginutils';\n\nconst esModuleSource = dataToEsm({\n  custom: 'data',\n  to: ['treeshake']\n}, options = {\n  compact: false,\n  indent: '\\t',\n  preferConst: false,\n  objectShorthand: false,\n  namedExports: true\n});\n/*\nOutputs the string ES module source:\n  export const custom = 'data';\n  export const to = ['treeshake'];\n  export default { custom, to };\n*/\n```\n\n\n## License\n\nMIT\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/rollup-pluginutils/-/rollup-pluginutils-2.4.1.tgz#de43ab54965bbf47843599a7f3adceb723de38db",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/rollup-pluginutils/-/rollup-pluginutils-2.4.1.tgz",
    "hash": "de43ab54965bbf47843599a7f3adceb723de38db",
    "integrity": "sha512-wesMQ9/172IJDIW/lYWm0vW0LiKe5Ekjws481R7z9WTRtmO59cqyM/2uUlxvf6yzm/fElFmHUobeQOYz46dZJw==",
    "registry": "npm",
    "packageName": "rollup-pluginutils",
    "cacheIntegrity": "sha512-wesMQ9/172IJDIW/lYWm0vW0LiKe5Ekjws481R7z9WTRtmO59cqyM/2uUlxvf6yzm/fElFmHUobeQOYz46dZJw== sha1-3kOrVJZbv0eENZmn863OtyPeONs="
  },
  "registry": "npm",
  "hash": "de43ab54965bbf47843599a7f3adceb723de38db"
}